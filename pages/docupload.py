# Set up and run this Streamlit App
import streamlit as st
import pandas as pd
from helper_functions import llm # <--- This is the helper function that we have created üÜï
from logics import tender_files_handler as th
from helper_functions import valuelist as vl
from helper_functions import utility as ut

# region <--------- Streamlit App Configuration --------->
st.set_page_config(
    layout="centered",
    page_title="Tender Quality Evaluation : Documents Upload"
)

st.title("Tender Quality Evaluation")
st.header(" - Document Upload")
# endregion <--------- Streamlit App Configuration --------->

# Do not continue if check_password is not True.  
if not ut.check_password():  
    st.stop()


#Initialize session states
if 'selected_tab' not in st.session_state:
    st.session_state['selected_tab'] = 'tab_eval'

if vl.METADATA_SESSIONNAME not in st.session_state:
    th.get_MetadataStoreToSession()




tab_eval, tab_proposal = st.tabs(["Tend Evaluation Plan", "Proposals"])
#form = st.form(key="form")
#form.subheader("Prompt")

#if st.session_state['selected_tab']=='tab_eval':   
with tab_eval:
    df_evalfile = []
    st.subheader("Tender Evaluation Plan File", divider=True)
    if len(st.session_state[vl.METADATA_SESSIONNAME]) > 0:
        df_metafile = st.session_state[vl.METADATA_SESSIONNAME]
        df_evalfile = df_metafile.loc[df_metafile['doc_category']==vl.doc_category.evalplan, 'doc_name']
        #if not df.empty:
        #    df_evalfile = df.get('doc_name')
            
    st.dataframe(df_evalfile)
    evalfile_upl = st.file_uploader("Upload your tender evaluation file (limited to 1 file only)", type=['csv','docx','pdf'], accept_multiple_files=False)

    st.button("Confirm Upload Evaluation File", on_click=th.UploadEvalFile,
                                                  args=[evalfile_upl])
    st.session_state['selected_tab'] = 'tab_eval'

#elif st.session_state['selected_tab']=='tab_proposal':

with tab_proposal:
    #if st.session_state['selected_tab']=='tab_proposal':
    df_proposalfile = []
    st.subheader("Tender Proposal Files", divider=True)
    if len(st.session_state[vl.METADATA_SESSIONNAME]) > 0:
        df_proposalfile = st.session_state[vl.METADATA_SESSIONNAME]
        df_proposalfile = df_proposalfile.loc[df_proposalfile['doc_category']==vl.doc_category.proposal, 'doc_name']
            #if not df.empty:
            #    df_proposalfile = df.get('doc_name')
    st.dataframe(df_proposalfile)
    proposalfile_upl = st.file_uploader("Upload your tender proposal file", type=['csv','docx','pdf'], accept_multiple_files=True)


    st.button("Confirm Upload Proposal File", on_click=th.UploadProposalFile,
                                    args=[proposalfile_upl])
    st.session_state['selected_tab'] = 'tab_proposal'

#-- Button to purge collection for user to reload all files --#

if len(st.session_state[vl.METADATA_SESSIONNAME]) > 0:
    st.subheader("Delete All Files", divider=True)
    st.info("Click purge files to clear all files and re-upload new version for evaluation and proposal files", icon="‚ÑπÔ∏è")
    st.button("Confirm to purge all files", on_click=lambda: th.Purge_Collection(vl.COLLECTIONNAME))

#user_prompt = form.text_area("Enter your prompt here", height=200)
#if form.form_submit_button("Submit"):
#    st.toast("User Input Submitted - {user_prompt}")
#    #response = llm.get_completion(user_prompt) # <--- This calls the helper function that we have created üÜï
#    response, course_details = cust.process_user_message(user_prompt)
#    df = pd.DataFrame(course_details)
#    st.write(response) # <--- This displays the response generated by the LLM onto the frontend üÜï
#    st.divider()

#    df

    #print(f"User Input is {user_prompt}")
    


